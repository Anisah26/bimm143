---
title: "Class 12"
author: "Raidah Anisah Huda"
format: html
editor: visual
---
# Class 12
Here we will use the DESeq2 package for RNASeq analysis. The data for today's class came from a study of airway smooth muscle cells treated with dexamethasone, a synthetic glucorticoid steroid with anti-inflammatory effects (Himes et al. 2014)

## Import their data

We need two things for this analysis:

-   **countData** (counts for every transcript/gene in each experiment)
-   **colData** (metadata that describes the experimental setup)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(countData)
```

```{r}
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(countData)
```

> Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
#another option
sum(metadata$dex == "control")
```

## Toy differential gene expression

-   Step 1. Calculate the mean of the control samples (i.e. columns in `countData`) Calculate the mean of the treated samples

(a) We need to find which columns in countData are "control" samples.

-   look in the metadata (a.k.a colData), \$dex column

```{r}
control.inds <- metadata$dex== "control"
```

(b) Extract all the control columns from `countData` and call it `control.counts`

```{r}
control.counts <- countData[ , control.inds]
```

(c) Calculate the mean value across the rows of `control.counts` i.e. calculate the mean count values for each gene in the control samples.

```{r}
control.mean <- rowMeans(control.counts) 
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust?

It is better to use rowMeans instead of `rowSums` because more samples were added then using `rowSums`/4 wouldn't take into account the new values.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

-   Step 2. Calculate the mean of the treated samples...

```{r}
treated.inds <- metadata$dex== "treated"
treated.counts <- countData[ , treated.inds]
treated.mean <- rowMeans(treated.counts) 
head(treated.mean)
```

We now have control ad treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

I would use geom_point for this plot.

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```

We use log transforms for skewed data such as this and because we really care most about relative changes in magnitude.

We most often use log2 as our transfer as the math is easier to interpret than log10 or others.

If we have no change - i.e. some values in control and treated we will have a log2 value of zero.

```{r}
log2(20/20)
```

If I have double the amount (20 compared to 10 for example) I will have a log2 fold change of +1

```{r}
log2(20/10)
```

If I have half the amount I will have a log2 fold-change of -1

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

> Q7. Did not answer (as told by Dr. Grant) Q8. How many genes are upregulated at the common threshold of +2 log2FC values?

```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE)

```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(meancounts$log2fc <= 2, na.rm=TRUE)
```

Hold on what about the stats!? Yes these are big changes but are these changes significant?!

> Q10. Do you trust these results? Why or why not?

No, I do not trust these results just yet because we havne't checked if the results are statistically significant.

To do this properly we will turn to the DESeq2 package

## DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need out input countData and colDat in a specific format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData,
                       colData = metadata,
                       design = ~dex)
dds
```

To run the analysis I can now use the main DESeq2 function called `DESeq()` with `dds` as input.

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

```{r}
summary(res)
```

Lets make a final (for today) plot of log2 fold-change vs the adjusted P-value

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low P-values that we care about and these are lost in the skewed plot above. Let's take the log of the \$padj vlues for out plot.

```{r}
plot(res$log2FoldChange, -log(res$padj), 
     xlab="Log2(FoldChange)",
     ylab="-Log(P-value)")
abline(v=c(-2,+2), col="blue", lty=2)
abline(h=-log(0.05), col="blue", lty=2)

```

Finally we can make a color vector to use in the plot to better highlight the genes we care about.

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) >= 2 ]  <- "purple"

mycols[res$padj >0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), 
     xlab="Log2(FoldChange)",
     ylab="-Log(P-value)", col=mycols)
abline(v=c(-2,+2), col="blue", lty=2)
abline(h=-log(0.05), col="blue", lty=2)
```

Done for today :-)

# Class 13

## Adding Annotation data

We can use the AnnotationDbi package to add annotation data such as gene identifiers from different sources to our results object.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```


We can translate (akak `map`) between all these database id formats:
```{r}
columns(org.Hs.eg.db)
```
My ids are stored as the rownames `res`
```{r}
head(rownames(res))
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")        #default is first (depends on if you have multiple values)
```

```{r}
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
```

## Save our results to date

```{r}
write.csv(res, file = "myresults.csv")
```

## Pathway analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in.

```{r}
#message: false
library(pathview)
library(gage)
library(gageData)

```

Look at the first two KEGG pathways
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
```{r}
head(res$entrez)
```

Make a new vector of fold-change values that I will use as input for `gage` this will have the ENTREZ IDs as names.
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```
Look at the top 3 "LESS"
```{r}
head(keggres$less, 3)
```

Now I can use the **KEGG IDs**("hsa05310", etc.) of these pathways from gage to view our genes mapped to these pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma Pathway from KEGG with out genes shown in color](hsa05310.pathview.png)





